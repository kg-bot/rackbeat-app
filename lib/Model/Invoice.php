<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rackbeat
 *
 * If you're interested in demo access, contact us below and we will setup a temporary account for you. Alternatively you can sign up through our site and skip the billing step.
 *
 * OpenAPI spec version: 0.5.4
 * Contact: tech@rackbeat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'object' => 'string',
        'amount_due' => 'int',
        'application_fee' => 'int',
        'attempt_count' => 'int',
        'attempted' => 'bool',
        'billing' => 'string',
        'closed' => 'bool',
        'currency' => 'string',
        'date' => 'string',
        'description' => 'string',
        'discount' => 'float',
        'due_date' => 'string',
        'ending_balance' => 'int',
        'forgiven' => 'bool',
        'metadata' => 'string',
        'next_payment_attempt' => 'int',
        'number' => 'int',
        'formatted_number' => 'float',
        'paid' => 'bool',
        'period_end' => 'string',
        'period_start' => 'string',
        'receipt_number' => 'string',
        'starting_balance' => 'int',
        'statement_descriptor' => 'string',
        'subscription' => 'string',
        'subtotal' => 'int',
        'tax' => 'float',
        'tax_percent' => 'float',
        'total' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int20',
        'object' => null,
        'amount_due' => null,
        'application_fee' => null,
        'attempt_count' => null,
        'attempted' => null,
        'billing' => null,
        'closed' => null,
        'currency' => null,
        'date' => 'ISO8601 (Atom)',
        'description' => null,
        'discount' => null,
        'due_date' => 'ISO8601 (Atom)',
        'ending_balance' => null,
        'forgiven' => null,
        'metadata' => null,
        'next_payment_attempt' => null,
        'number' => 'int10',
        'formatted_number' => null,
        'paid' => null,
        'period_end' => 'ISO8601 (Atom)',
        'period_start' => 'ISO8601 (Atom)',
        'receipt_number' => null,
        'starting_balance' => null,
        'statement_descriptor' => null,
        'subscription' => null,
        'subtotal' => null,
        'tax' => null,
        'tax_percent' => null,
        'total' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object' => 'object',
        'amount_due' => 'amount_due',
        'application_fee' => 'application_fee',
        'attempt_count' => 'attempt_count',
        'attempted' => 'attempted',
        'billing' => 'billing',
        'closed' => 'closed',
        'currency' => 'currency',
        'date' => 'date',
        'description' => 'description',
        'discount' => 'discount',
        'due_date' => 'due_date',
        'ending_balance' => 'ending_balance',
        'forgiven' => 'forgiven',
        'metadata' => 'metadata',
        'next_payment_attempt' => 'next_payment_attempt',
        'number' => 'number',
        'formatted_number' => 'formatted_number',
        'paid' => 'paid',
        'period_end' => 'period_end',
        'period_start' => 'period_start',
        'receipt_number' => 'receipt_number',
        'starting_balance' => 'starting_balance',
        'statement_descriptor' => 'statement_descriptor',
        'subscription' => 'subscription',
        'subtotal' => 'subtotal',
        'tax' => 'tax',
        'tax_percent' => 'tax_percent',
        'total' => 'total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object' => 'setObject',
        'amount_due' => 'setAmountDue',
        'application_fee' => 'setApplicationFee',
        'attempt_count' => 'setAttemptCount',
        'attempted' => 'setAttempted',
        'billing' => 'setBilling',
        'closed' => 'setClosed',
        'currency' => 'setCurrency',
        'date' => 'setDate',
        'description' => 'setDescription',
        'discount' => 'setDiscount',
        'due_date' => 'setDueDate',
        'ending_balance' => 'setEndingBalance',
        'forgiven' => 'setForgiven',
        'metadata' => 'setMetadata',
        'next_payment_attempt' => 'setNextPaymentAttempt',
        'number' => 'setNumber',
        'formatted_number' => 'setFormattedNumber',
        'paid' => 'setPaid',
        'period_end' => 'setPeriodEnd',
        'period_start' => 'setPeriodStart',
        'receipt_number' => 'setReceiptNumber',
        'starting_balance' => 'setStartingBalance',
        'statement_descriptor' => 'setStatementDescriptor',
        'subscription' => 'setSubscription',
        'subtotal' => 'setSubtotal',
        'tax' => 'setTax',
        'tax_percent' => 'setTaxPercent',
        'total' => 'setTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object' => 'getObject',
        'amount_due' => 'getAmountDue',
        'application_fee' => 'getApplicationFee',
        'attempt_count' => 'getAttemptCount',
        'attempted' => 'getAttempted',
        'billing' => 'getBilling',
        'closed' => 'getClosed',
        'currency' => 'getCurrency',
        'date' => 'getDate',
        'description' => 'getDescription',
        'discount' => 'getDiscount',
        'due_date' => 'getDueDate',
        'ending_balance' => 'getEndingBalance',
        'forgiven' => 'getForgiven',
        'metadata' => 'getMetadata',
        'next_payment_attempt' => 'getNextPaymentAttempt',
        'number' => 'getNumber',
        'formatted_number' => 'getFormattedNumber',
        'paid' => 'getPaid',
        'period_end' => 'getPeriodEnd',
        'period_start' => 'getPeriodStart',
        'receipt_number' => 'getReceiptNumber',
        'starting_balance' => 'getStartingBalance',
        'statement_descriptor' => 'getStatementDescriptor',
        'subscription' => 'getSubscription',
        'subtotal' => 'getSubtotal',
        'tax' => 'getTax',
        'tax_percent' => 'getTaxPercent',
        'total' => 'getTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['object'] = isset($data['object']) ? $data['object'] : null;
        $this->container['amount_due'] = isset($data['amount_due']) ? $data['amount_due'] : null;
        $this->container['application_fee'] = isset($data['application_fee']) ? $data['application_fee'] : null;
        $this->container['attempt_count'] = isset($data['attempt_count']) ? $data['attempt_count'] : null;
        $this->container['attempted'] = isset($data['attempted']) ? $data['attempted'] : null;
        $this->container['billing'] = isset($data['billing']) ? $data['billing'] : null;
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['ending_balance'] = isset($data['ending_balance']) ? $data['ending_balance'] : null;
        $this->container['forgiven'] = isset($data['forgiven']) ? $data['forgiven'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['next_payment_attempt'] = isset($data['next_payment_attempt']) ? $data['next_payment_attempt'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['formatted_number'] = isset($data['formatted_number']) ? $data['formatted_number'] : null;
        $this->container['paid'] = isset($data['paid']) ? $data['paid'] : null;
        $this->container['period_end'] = isset($data['period_end']) ? $data['period_end'] : null;
        $this->container['period_start'] = isset($data['period_start']) ? $data['period_start'] : null;
        $this->container['receipt_number'] = isset($data['receipt_number']) ? $data['receipt_number'] : null;
        $this->container['starting_balance'] = isset($data['starting_balance']) ? $data['starting_balance'] : null;
        $this->container['statement_descriptor'] = isset($data['statement_descriptor']) ? $data['statement_descriptor'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['tax_percent'] = isset($data['tax_percent']) ? $data['tax_percent'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string $object object
     *
     * @return $this
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets amount_due
     *
     * @return int
     */
    public function getAmountDue()
    {
        return $this->container['amount_due'];
    }

    /**
     * Sets amount_due
     *
     * @param int $amount_due amount_due
     *
     * @return $this
     */
    public function setAmountDue($amount_due)
    {
        $this->container['amount_due'] = $amount_due;

        return $this;
    }

    /**
     * Gets application_fee
     *
     * @return int
     */
    public function getApplicationFee()
    {
        return $this->container['application_fee'];
    }

    /**
     * Sets application_fee
     *
     * @param int $application_fee application_fee
     *
     * @return $this
     */
    public function setApplicationFee($application_fee)
    {
        $this->container['application_fee'] = $application_fee;

        return $this;
    }

    /**
     * Gets attempt_count
     *
     * @return int
     */
    public function getAttemptCount()
    {
        return $this->container['attempt_count'];
    }

    /**
     * Sets attempt_count
     *
     * @param int $attempt_count attempt_count
     *
     * @return $this
     */
    public function setAttemptCount($attempt_count)
    {
        $this->container['attempt_count'] = $attempt_count;

        return $this;
    }

    /**
     * Gets attempted
     *
     * @return bool
     */
    public function getAttempted()
    {
        return $this->container['attempted'];
    }

    /**
     * Sets attempted
     *
     * @param bool $attempted attempted
     *
     * @return $this
     */
    public function setAttempted($attempted)
    {
        $this->container['attempted'] = $attempted;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return string
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param string $billing billing
     *
     * @return $this
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed closed
     *
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets ending_balance
     *
     * @return int
     */
    public function getEndingBalance()
    {
        return $this->container['ending_balance'];
    }

    /**
     * Sets ending_balance
     *
     * @param int $ending_balance ending_balance
     *
     * @return $this
     */
    public function setEndingBalance($ending_balance)
    {
        $this->container['ending_balance'] = $ending_balance;

        return $this;
    }

    /**
     * Gets forgiven
     *
     * @return bool
     */
    public function getForgiven()
    {
        return $this->container['forgiven'];
    }

    /**
     * Sets forgiven
     *
     * @param bool $forgiven forgiven
     *
     * @return $this
     */
    public function setForgiven($forgiven)
    {
        $this->container['forgiven'] = $forgiven;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets next_payment_attempt
     *
     * @return int
     */
    public function getNextPaymentAttempt()
    {
        return $this->container['next_payment_attempt'];
    }

    /**
     * Sets next_payment_attempt
     *
     * @param int $next_payment_attempt next_payment_attempt
     *
     * @return $this
     */
    public function setNextPaymentAttempt($next_payment_attempt)
    {
        $this->container['next_payment_attempt'] = $next_payment_attempt;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets formatted_number
     *
     * @return float
     */
    public function getFormattedNumber()
    {
        return $this->container['formatted_number'];
    }

    /**
     * Sets formatted_number
     *
     * @param float $formatted_number formatted_number
     *
     * @return $this
     */
    public function setFormattedNumber($formatted_number)
    {
        $this->container['formatted_number'] = $formatted_number;

        return $this;
    }

    /**
     * Gets paid
     *
     * @return bool
     */
    public function getPaid()
    {
        return $this->container['paid'];
    }

    /**
     * Sets paid
     *
     * @param bool $paid paid
     *
     * @return $this
     */
    public function setPaid($paid)
    {
        $this->container['paid'] = $paid;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return string
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param string $period_end period_end
     *
     * @return $this
     */
    public function setPeriodEnd($period_end)
    {
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets period_start
     *
     * @return string
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param string $period_start period_start
     *
     * @return $this
     */
    public function setPeriodStart($period_start)
    {
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets receipt_number
     *
     * @return string
     */
    public function getReceiptNumber()
    {
        return $this->container['receipt_number'];
    }

    /**
     * Sets receipt_number
     *
     * @param string $receipt_number receipt_number
     *
     * @return $this
     */
    public function setReceiptNumber($receipt_number)
    {
        $this->container['receipt_number'] = $receipt_number;

        return $this;
    }

    /**
     * Gets starting_balance
     *
     * @return int
     */
    public function getStartingBalance()
    {
        return $this->container['starting_balance'];
    }

    /**
     * Sets starting_balance
     *
     * @param int $starting_balance starting_balance
     *
     * @return $this
     */
    public function setStartingBalance($starting_balance)
    {
        $this->container['starting_balance'] = $starting_balance;

        return $this;
    }

    /**
     * Gets statement_descriptor
     *
     * @return string
     */
    public function getStatementDescriptor()
    {
        return $this->container['statement_descriptor'];
    }

    /**
     * Sets statement_descriptor
     *
     * @param string $statement_descriptor statement_descriptor
     *
     * @return $this
     */
    public function setStatementDescriptor($statement_descriptor)
    {
        $this->container['statement_descriptor'] = $statement_descriptor;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return string
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param string $subscription subscription
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return int
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param int $subtotal subtotal
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets tax_percent
     *
     * @return float
     */
    public function getTaxPercent()
    {
        return $this->container['tax_percent'];
    }

    /**
     * Sets tax_percent
     *
     * @param float $tax_percent tax_percent
     *
     * @return $this
     */
    public function setTaxPercent($tax_percent)
    {
        $this->container['tax_percent'] = $tax_percent;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

