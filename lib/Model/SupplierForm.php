<?php
/**
 * SupplierForm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rackbeat
 *
 * If you're interested in demo access, contact us below and we will setup a temporary account for you. Alternatively you can sign up through our site and skip the billing step.
 *
 * OpenAPI spec version: 0.5.4
 * Contact: tech@rackbeat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SupplierForm Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SupplierForm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'supplier_form';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number' => 'int',
        'company_name' => 'string',
        'company_vat' => 'string',
        'address_street' => 'string',
        'address_street2' => 'string',
        'address_city' => 'string',
        'address_zipcode' => 'string',
        'address_country' => 'string',
        'contact_email' => 'string',
        'contact_phone' => 'string',
        'locale' => 'string',
        'currency' => 'string',
        'vat_zone' => 'string',
        'payment_terms_id' => 'int',
        'supplier_group_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number' => 'int10',
        'company_name' => null,
        'company_vat' => null,
        'address_street' => null,
        'address_street2' => null,
        'address_city' => null,
        'address_zipcode' => null,
        'address_country' => null,
        'contact_email' => null,
        'contact_phone' => null,
        'locale' => null,
        'currency' => null,
        'vat_zone' => null,
        'payment_terms_id' => 'int10',
        'supplier_group_id' => 'int10'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'company_name' => 'company_name',
        'company_vat' => 'company_vat',
        'address_street' => 'address_street',
        'address_street2' => 'address_street2',
        'address_city' => 'address_city',
        'address_zipcode' => 'address_zipcode',
        'address_country' => 'address_country',
        'contact_email' => 'contact_email',
        'contact_phone' => 'contact_phone',
        'locale' => 'locale',
        'currency' => 'currency',
        'vat_zone' => 'vat_zone',
        'payment_terms_id' => 'payment_terms_id',
        'supplier_group_id' => 'supplier_group_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'company_name' => 'setCompanyName',
        'company_vat' => 'setCompanyVat',
        'address_street' => 'setAddressStreet',
        'address_street2' => 'setAddressStreet2',
        'address_city' => 'setAddressCity',
        'address_zipcode' => 'setAddressZipcode',
        'address_country' => 'setAddressCountry',
        'contact_email' => 'setContactEmail',
        'contact_phone' => 'setContactPhone',
        'locale' => 'setLocale',
        'currency' => 'setCurrency',
        'vat_zone' => 'setVatZone',
        'payment_terms_id' => 'setPaymentTermsId',
        'supplier_group_id' => 'setSupplierGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'company_name' => 'getCompanyName',
        'company_vat' => 'getCompanyVat',
        'address_street' => 'getAddressStreet',
        'address_street2' => 'getAddressStreet2',
        'address_city' => 'getAddressCity',
        'address_zipcode' => 'getAddressZipcode',
        'address_country' => 'getAddressCountry',
        'contact_email' => 'getContactEmail',
        'contact_phone' => 'getContactPhone',
        'locale' => 'getLocale',
        'currency' => 'getCurrency',
        'vat_zone' => 'getVatZone',
        'payment_terms_id' => 'getPaymentTermsId',
        'supplier_group_id' => 'getSupplierGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_vat'] = isset($data['company_vat']) ? $data['company_vat'] : null;
        $this->container['address_street'] = isset($data['address_street']) ? $data['address_street'] : null;
        $this->container['address_street2'] = isset($data['address_street2']) ? $data['address_street2'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_zipcode'] = isset($data['address_zipcode']) ? $data['address_zipcode'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['contact_phone'] = isset($data['contact_phone']) ? $data['contact_phone'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['vat_zone'] = isset($data['vat_zone']) ? $data['vat_zone'] : null;
        $this->container['payment_terms_id'] = isset($data['payment_terms_id']) ? $data['payment_terms_id'] : null;
        $this->container['supplier_group_id'] = isset($data['supplier_group_id']) ? $data['supplier_group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ((strlen($this->container['company_name']) > 80)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['company_vat']) && (strlen($this->container['company_vat']) > 40)) {
            $invalidProperties[] = "invalid value for 'company_vat', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['address_street']) && (strlen($this->container['address_street']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_street2']) && (strlen($this->container['address_street2']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_street2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_city']) && (strlen($this->container['address_city']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_zipcode']) && (strlen($this->container['address_zipcode']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_zipcode', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_country']) && (strlen($this->container['address_country']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_country', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contact_email']) && (strlen($this->container['contact_email']) > 80)) {
            $invalidProperties[] = "invalid value for 'contact_email', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['contact_phone']) && (strlen($this->container['contact_phone']) > 80)) {
            $invalidProperties[] = "invalid value for 'contact_phone', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['locale']) && (strlen($this->container['locale']) > 2)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['currency']) && (strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['vat_zone']) && (strlen($this->container['vat_zone']) > 16)) {
            $invalidProperties[] = "invalid value for 'vat_zone', the character length must be smaller than or equal to 16.";
        }

        if ($this->container['payment_terms_id'] === null) {
            $invalidProperties[] = "'payment_terms_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['company_name'] === null) {
            return false;
        }
        if (strlen($this->container['company_name']) > 80) {
            return false;
        }
        if (strlen($this->container['company_vat']) > 40) {
            return false;
        }
        if (strlen($this->container['address_street']) > 255) {
            return false;
        }
        if (strlen($this->container['address_street2']) > 255) {
            return false;
        }
        if (strlen($this->container['address_city']) > 255) {
            return false;
        }
        if (strlen($this->container['address_zipcode']) > 255) {
            return false;
        }
        if (strlen($this->container['address_country']) > 255) {
            return false;
        }
        if (strlen($this->container['contact_email']) > 80) {
            return false;
        }
        if (strlen($this->container['contact_phone']) > 80) {
            return false;
        }
        if (strlen($this->container['locale']) > 2) {
            return false;
        }
        if (strlen($this->container['currency']) > 3) {
            return false;
        }
        if (strlen($this->container['vat_zone']) > 16) {
            return false;
        }
        if ($this->container['payment_terms_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number Unique integer
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        if ((strlen($company_name) > 80)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling SupplierForm., must be smaller than or equal to 80.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_vat
     *
     * @return string
     */
    public function getCompanyVat()
    {
        return $this->container['company_vat'];
    }

    /**
     * Sets company_vat
     *
     * @param string $company_vat company_vat
     *
     * @return $this
     */
    public function setCompanyVat($company_vat)
    {
        if (!is_null($company_vat) && (strlen($company_vat) > 40)) {
            throw new \InvalidArgumentException('invalid length for $company_vat when calling SupplierForm., must be smaller than or equal to 40.');
        }

        $this->container['company_vat'] = $company_vat;

        return $this;
    }

    /**
     * Gets address_street
     *
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['address_street'];
    }

    /**
     * Sets address_street
     *
     * @param string $address_street address_street
     *
     * @return $this
     */
    public function setAddressStreet($address_street)
    {
        if (!is_null($address_street) && (strlen($address_street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_street when calling SupplierForm., must be smaller than or equal to 255.');
        }

        $this->container['address_street'] = $address_street;

        return $this;
    }

    /**
     * Gets address_street2
     *
     * @return string
     */
    public function getAddressStreet2()
    {
        return $this->container['address_street2'];
    }

    /**
     * Sets address_street2
     *
     * @param string $address_street2 address_street2
     *
     * @return $this
     */
    public function setAddressStreet2($address_street2)
    {
        if (!is_null($address_street2) && (strlen($address_street2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_street2 when calling SupplierForm., must be smaller than or equal to 255.');
        }

        $this->container['address_street2'] = $address_street2;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city address_city
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        if (!is_null($address_city) && (strlen($address_city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_city when calling SupplierForm., must be smaller than or equal to 255.');
        }

        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_zipcode
     *
     * @return string
     */
    public function getAddressZipcode()
    {
        return $this->container['address_zipcode'];
    }

    /**
     * Sets address_zipcode
     *
     * @param string $address_zipcode address_zipcode
     *
     * @return $this
     */
    public function setAddressZipcode($address_zipcode)
    {
        if (!is_null($address_zipcode) && (strlen($address_zipcode) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_zipcode when calling SupplierForm., must be smaller than or equal to 255.');
        }

        $this->container['address_zipcode'] = $address_zipcode;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param string $address_country address_country
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        if (!is_null($address_country) && (strlen($address_country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_country when calling SupplierForm., must be smaller than or equal to 255.');
        }

        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email contact_email
     *
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        if (!is_null($contact_email) && (strlen($contact_email) > 80)) {
            throw new \InvalidArgumentException('invalid length for $contact_email when calling SupplierForm., must be smaller than or equal to 80.');
        }

        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_phone
     *
     * @return string
     */
    public function getContactPhone()
    {
        return $this->container['contact_phone'];
    }

    /**
     * Sets contact_phone
     *
     * @param string $contact_phone contact_phone
     *
     * @return $this
     */
    public function setContactPhone($contact_phone)
    {
        if (!is_null($contact_phone) && (strlen($contact_phone) > 80)) {
            throw new \InvalidArgumentException('invalid length for $contact_phone when calling SupplierForm., must be smaller than or equal to 80.');
        }

        $this->container['contact_phone'] = $contact_phone;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        if (!is_null($locale) && (strlen($locale) > 2)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling SupplierForm., must be smaller than or equal to 2.');
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        if (!is_null($currency) && (strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling SupplierForm., must be smaller than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets vat_zone
     *
     * @return string
     */
    public function getVatZone()
    {
        return $this->container['vat_zone'];
    }

    /**
     * Sets vat_zone
     *
     * @param string $vat_zone vat_zone
     *
     * @return $this
     */
    public function setVatZone($vat_zone)
    {
        if (!is_null($vat_zone) && (strlen($vat_zone) > 16)) {
            throw new \InvalidArgumentException('invalid length for $vat_zone when calling SupplierForm., must be smaller than or equal to 16.');
        }

        $this->container['vat_zone'] = $vat_zone;

        return $this;
    }

    /**
     * Gets payment_terms_id
     *
     * @return int
     */
    public function getPaymentTermsId()
    {
        return $this->container['payment_terms_id'];
    }

    /**
     * Sets payment_terms_id
     *
     * @param int $payment_terms_id payment_terms_id
     *
     * @return $this
     */
    public function setPaymentTermsId($payment_terms_id)
    {
        $this->container['payment_terms_id'] = $payment_terms_id;

        return $this;
    }

    /**
     * Gets supplier_group_id
     *
     * @return int
     */
    public function getSupplierGroupId()
    {
        return $this->container['supplier_group_id'];
    }

    /**
     * Sets supplier_group_id
     *
     * @param int $supplier_group_id supplier_group_id
     *
     * @return $this
     */
    public function setSupplierGroupId($supplier_group_id)
    {
        $this->container['supplier_group_id'] = $supplier_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

