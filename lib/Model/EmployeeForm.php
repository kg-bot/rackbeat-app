<?php
/**
 * EmployeeForm
 *
 * PHP version 5
 *
 * @category Class
 * @package  RackbeatApp\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rackbeat
 *
 * If you're interested in demo access, contact us below and we will setup a temporary account for you. Alternatively you can sign up through our site and skip the billing step.
 *
 * OpenAPI spec version: 0.5.4
 * Contact: tech@rackbeat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RackbeatApp\Client\Model;

use ArrayAccess;
use RackbeatApp\Client\ObjectSerializer;

/**
 * EmployeeForm Class Doc Comment
 *
 * @category Class
 * @package     RackbeatApp\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EmployeeForm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'employee_form';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'locale' => 'string',
        'contact_email' => 'string',
        'contact_phone' => 'string',
        'job_title' => 'string',
        'default_location_id' => 'string',
        'number' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'locale' => null,
        'contact_email' => null,
        'contact_phone' => null,
        'job_title' => null,
        'default_location_id' => null,
        'number' => 'int10'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'locale' => 'locale',
        'contact_email' => 'contact_email',
        'contact_phone' => 'contact_phone',
        'job_title' => 'job_title',
        'default_location_id' => 'default_location_id',
        'number' => 'number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'locale' => 'setLocale',
        'contact_email' => 'setContactEmail',
        'contact_phone' => 'setContactPhone',
        'job_title' => 'setJobTitle',
        'default_location_id' => 'setDefaultLocationId',
        'number' => 'setNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'locale' => 'getLocale',
        'contact_email' => 'getContactEmail',
        'contact_phone' => 'getContactPhone',
        'job_title' => 'getJobTitle',
        'default_location_id' => 'getDefaultLocationId',
        'number' => 'getNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['contact_phone'] = isset($data['contact_phone']) ? $data['contact_phone'] : null;
        $this->container['job_title'] = isset($data['job_title']) ? $data['job_title'] : null;
        $this->container['default_location_id'] = isset($data['default_location_id']) ? $data['default_location_id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 80)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['locale']) && (strlen($this->container['locale']) > 2)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['contact_email']) && (strlen($this->container['contact_email']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contact_phone']) && (strlen($this->container['contact_phone']) > 20)) {
            $invalidProperties[] = "invalid value for 'contact_phone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['job_title']) && (strlen($this->container['job_title']) > 50)) {
            $invalidProperties[] = "invalid value for 'job_title', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 80) {
            return false;
        }
        if (strlen($this->container['locale']) > 2) {
            return false;
        }
        if (strlen($this->container['contact_email']) > 255) {
            return false;
        }
        if (strlen($this->container['contact_phone']) > 20) {
            return false;
        }
        if (strlen($this->container['job_title']) > 50) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 80)) {
            throw new \InvalidArgumentException('invalid length for $name when calling EmployeeForm., must be smaller than or equal to 80.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        if (!is_null($locale) && (strlen($locale) > 2)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling EmployeeForm., must be smaller than or equal to 2.');
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email contact_email
     *
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        if (!is_null($contact_email) && (strlen($contact_email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_email when calling EmployeeForm., must be smaller than or equal to 255.');
        }

        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_phone
     *
     * @return string
     */
    public function getContactPhone()
    {
        return $this->container['contact_phone'];
    }

    /**
     * Sets contact_phone
     *
     * @param string $contact_phone contact_phone
     *
     * @return $this
     */
    public function setContactPhone($contact_phone)
    {
        if (!is_null($contact_phone) && (strlen($contact_phone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $contact_phone when calling EmployeeForm., must be smaller than or equal to 20.');
        }

        $this->container['contact_phone'] = $contact_phone;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title job_title
     *
     * @return $this
     */
    public function setJobTitle($job_title)
    {
        if (!is_null($job_title) && (strlen($job_title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $job_title when calling EmployeeForm., must be smaller than or equal to 50.');
        }

        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets default_location_id
     *
     * @return string
     */
    public function getDefaultLocationId()
    {
        return $this->container['default_location_id'];
    }

    /**
     * Sets default_location_id
     *
     * @param string $default_location_id default_location_id
     *
     * @return $this
     */
    public function setDefaultLocationId($default_location_id)
    {
        $this->container['default_location_id'] = $default_location_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

