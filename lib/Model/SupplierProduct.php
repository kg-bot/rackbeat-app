<?php
/**
 * SupplierProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rackbeat
 *
 * If you're interested in demo access, contact us below and we will setup a temporary account for you. Alternatively you can sign up through our site and skip the billing step.
 *
 * OpenAPI spec version: 0.5.4
 * Contact: tech@rackbeat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SupplierProduct Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SupplierProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupplierProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'number' => 'string',
        'regular_number' => 'string',
        'is_custom_number' => 'bool',
        'recommended_cost_price' => 'float',
        'regular_cost_price' => 'float',
        'is_custom_cost_price' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'number' => null,
        'regular_number' => null,
        'is_custom_number' => null,
        'recommended_cost_price' => null,
        'regular_cost_price' => null,
        'is_custom_cost_price' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'number' => 'number',
        'regular_number' => 'regular_number',
        'is_custom_number' => 'is_custom_number',
        'recommended_cost_price' => 'recommended_cost_price',
        'regular_cost_price' => 'regular_cost_price',
        'is_custom_cost_price' => 'is_custom_cost_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'number' => 'setNumber',
        'regular_number' => 'setRegularNumber',
        'is_custom_number' => 'setIsCustomNumber',
        'recommended_cost_price' => 'setRecommendedCostPrice',
        'regular_cost_price' => 'setRegularCostPrice',
        'is_custom_cost_price' => 'setIsCustomCostPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'number' => 'getNumber',
        'regular_number' => 'getRegularNumber',
        'is_custom_number' => 'getIsCustomNumber',
        'recommended_cost_price' => 'getRecommendedCostPrice',
        'regular_cost_price' => 'getRegularCostPrice',
        'is_custom_cost_price' => 'getIsCustomCostPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['regular_number'] = isset($data['regular_number']) ? $data['regular_number'] : null;
        $this->container['is_custom_number'] = isset($data['is_custom_number']) ? $data['is_custom_number'] : null;
        $this->container['recommended_cost_price'] = isset($data['recommended_cost_price']) ? $data['recommended_cost_price'] : null;
        $this->container['regular_cost_price'] = isset($data['regular_cost_price']) ? $data['regular_cost_price'] : null;
        $this->container['is_custom_cost_price'] = isset($data['is_custom_cost_price']) ? $data['is_custom_cost_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets regular_number
     *
     * @return string
     */
    public function getRegularNumber()
    {
        return $this->container['regular_number'];
    }

    /**
     * Sets regular_number
     *
     * @param string $regular_number regular_number
     *
     * @return $this
     */
    public function setRegularNumber($regular_number)
    {
        $this->container['regular_number'] = $regular_number;

        return $this;
    }

    /**
     * Gets is_custom_number
     *
     * @return bool
     */
    public function getIsCustomNumber()
    {
        return $this->container['is_custom_number'];
    }

    /**
     * Sets is_custom_number
     *
     * @param bool $is_custom_number is_custom_number
     *
     * @return $this
     */
    public function setIsCustomNumber($is_custom_number)
    {
        $this->container['is_custom_number'] = $is_custom_number;

        return $this;
    }

    /**
     * Gets recommended_cost_price
     *
     * @return float
     */
    public function getRecommendedCostPrice()
    {
        return $this->container['recommended_cost_price'];
    }

    /**
     * Sets recommended_cost_price
     *
     * @param float $recommended_cost_price recommended_cost_price
     *
     * @return $this
     */
    public function setRecommendedCostPrice($recommended_cost_price)
    {
        $this->container['recommended_cost_price'] = $recommended_cost_price;

        return $this;
    }

    /**
     * Gets regular_cost_price
     *
     * @return float
     */
    public function getRegularCostPrice()
    {
        return $this->container['regular_cost_price'];
    }

    /**
     * Sets regular_cost_price
     *
     * @param float $regular_cost_price regular_cost_price
     *
     * @return $this
     */
    public function setRegularCostPrice($regular_cost_price)
    {
        $this->container['regular_cost_price'] = $regular_cost_price;

        return $this;
    }

    /**
     * Gets is_custom_cost_price
     *
     * @return bool
     */
    public function getIsCustomCostPrice()
    {
        return $this->container['is_custom_cost_price'];
    }

    /**
     * Sets is_custom_cost_price
     *
     * @param bool $is_custom_cost_price is_custom_cost_price
     *
     * @return $this
     */
    public function setIsCustomCostPrice($is_custom_cost_price)
    {
        $this->container['is_custom_cost_price'] = $is_custom_cost_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

