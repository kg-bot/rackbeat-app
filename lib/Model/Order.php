<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rackbeat
 *
 * If you're interested in demo access, contact us below and we will setup a temporary account for you. Alternatively you can sign up through our site and skip the billing step.
 *
 * OpenAPI spec version: 0.5.4
 * Contact: tech@rackbeat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number' => 'int',
        'total_subtotal' => 'float',
        'total_total' => 'float',
        'currency' => 'string',
        'currency_rate' => 'float',
        'is_booked' => 'bool',
        'is_shipped' => 'bool',
        'is_partly_shipped' => 'bool',
        'is_invoiced' => 'bool',
        'is_partly_invoiced' => 'bool',
        'is_paid' => 'bool',
        'is_partly_paid' => 'bool',
        'lines' => '\Swagger\Client\Model\OrderLine[]',
        'customer_id' => 'int',
        'customer' => '\Swagger\Client\Model\Customer',
        'employee_id' => 'int',
        'employee' => '\Swagger\Client\Model\Employee',
        'note' => 'string',
        'address_street' => 'string',
        'address_street2' => 'string',
        'address_city' => 'string',
        'address_zipcode' => 'string',
        'address_country' => 'string',
        'deliver_at' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'self' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number' => 'int10',
        'total_subtotal' => null,
        'total_total' => null,
        'currency' => null,
        'currency_rate' => null,
        'is_booked' => null,
        'is_shipped' => null,
        'is_partly_shipped' => null,
        'is_invoiced' => null,
        'is_partly_invoiced' => null,
        'is_paid' => null,
        'is_partly_paid' => null,
        'lines' => null,
        'customer_id' => 'int10',
        'customer' => null,
        'employee_id' => null,
        'employee' => null,
        'note' => null,
        'address_street' => null,
        'address_street2' => null,
        'address_city' => null,
        'address_zipcode' => null,
        'address_country' => null,
        'deliver_at' => 'ISO8601 (Atom)',
        'created_at' => 'ISO8601 (Atom)',
        'updated_at' => 'ISO8601 (Atom)',
        'self' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'total_subtotal' => 'total_subtotal',
        'total_total' => 'total_total',
        'currency' => 'currency',
        'currency_rate' => 'currency_rate',
        'is_booked' => 'is_booked',
        'is_shipped' => 'is_shipped',
        'is_partly_shipped' => 'is_partly_shipped',
        'is_invoiced' => 'is_invoiced',
        'is_partly_invoiced' => 'is_partly_invoiced',
        'is_paid' => 'is_paid',
        'is_partly_paid' => 'is_partly_paid',
        'lines' => 'lines',
        'customer_id' => 'customer_id',
        'customer' => 'customer',
        'employee_id' => 'employee_id',
        'employee' => 'employee',
        'note' => 'note',
        'address_street' => 'address_street',
        'address_street2' => 'address_street2',
        'address_city' => 'address_city',
        'address_zipcode' => 'address_zipcode',
        'address_country' => 'address_country',
        'deliver_at' => 'deliver_at',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'self' => 'self'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'total_subtotal' => 'setTotalSubtotal',
        'total_total' => 'setTotalTotal',
        'currency' => 'setCurrency',
        'currency_rate' => 'setCurrencyRate',
        'is_booked' => 'setIsBooked',
        'is_shipped' => 'setIsShipped',
        'is_partly_shipped' => 'setIsPartlyShipped',
        'is_invoiced' => 'setIsInvoiced',
        'is_partly_invoiced' => 'setIsPartlyInvoiced',
        'is_paid' => 'setIsPaid',
        'is_partly_paid' => 'setIsPartlyPaid',
        'lines' => 'setLines',
        'customer_id' => 'setCustomerId',
        'customer' => 'setCustomer',
        'employee_id' => 'setEmployeeId',
        'employee' => 'setEmployee',
        'note' => 'setNote',
        'address_street' => 'setAddressStreet',
        'address_street2' => 'setAddressStreet2',
        'address_city' => 'setAddressCity',
        'address_zipcode' => 'setAddressZipcode',
        'address_country' => 'setAddressCountry',
        'deliver_at' => 'setDeliverAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'self' => 'setSelf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'total_subtotal' => 'getTotalSubtotal',
        'total_total' => 'getTotalTotal',
        'currency' => 'getCurrency',
        'currency_rate' => 'getCurrencyRate',
        'is_booked' => 'getIsBooked',
        'is_shipped' => 'getIsShipped',
        'is_partly_shipped' => 'getIsPartlyShipped',
        'is_invoiced' => 'getIsInvoiced',
        'is_partly_invoiced' => 'getIsPartlyInvoiced',
        'is_paid' => 'getIsPaid',
        'is_partly_paid' => 'getIsPartlyPaid',
        'lines' => 'getLines',
        'customer_id' => 'getCustomerId',
        'customer' => 'getCustomer',
        'employee_id' => 'getEmployeeId',
        'employee' => 'getEmployee',
        'note' => 'getNote',
        'address_street' => 'getAddressStreet',
        'address_street2' => 'getAddressStreet2',
        'address_city' => 'getAddressCity',
        'address_zipcode' => 'getAddressZipcode',
        'address_country' => 'getAddressCountry',
        'deliver_at' => 'getDeliverAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'self' => 'getSelf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['total_subtotal'] = isset($data['total_subtotal']) ? $data['total_subtotal'] : null;
        $this->container['total_total'] = isset($data['total_total']) ? $data['total_total'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['currency_rate'] = isset($data['currency_rate']) ? $data['currency_rate'] : null;
        $this->container['is_booked'] = isset($data['is_booked']) ? $data['is_booked'] : null;
        $this->container['is_shipped'] = isset($data['is_shipped']) ? $data['is_shipped'] : null;
        $this->container['is_partly_shipped'] = isset($data['is_partly_shipped']) ? $data['is_partly_shipped'] : null;
        $this->container['is_invoiced'] = isset($data['is_invoiced']) ? $data['is_invoiced'] : null;
        $this->container['is_partly_invoiced'] = isset($data['is_partly_invoiced']) ? $data['is_partly_invoiced'] : null;
        $this->container['is_paid'] = isset($data['is_paid']) ? $data['is_paid'] : null;
        $this->container['is_partly_paid'] = isset($data['is_partly_paid']) ? $data['is_partly_paid'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['address_street'] = isset($data['address_street']) ? $data['address_street'] : null;
        $this->container['address_street2'] = isset($data['address_street2']) ? $data['address_street2'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_zipcode'] = isset($data['address_zipcode']) ? $data['address_zipcode'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['deliver_at'] = isset($data['deliver_at']) ? $data['deliver_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['self'] = isset($data['self']) ? $data['self'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['currency']) && (strlen($this->container['currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['address_street']) && (strlen($this->container['address_street']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_street2']) && (strlen($this->container['address_street2']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_street2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_city']) && (strlen($this->container['address_city']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_city', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_zipcode']) && (strlen($this->container['address_zipcode']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_zipcode', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address_country']) && (strlen($this->container['address_country']) > 255)) {
            $invalidProperties[] = "invalid value for 'address_country', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['currency']) > 3) {
            return false;
        }
        if (strlen($this->container['address_street']) > 255) {
            return false;
        }
        if (strlen($this->container['address_street2']) > 255) {
            return false;
        }
        if (strlen($this->container['address_city']) > 255) {
            return false;
        }
        if (strlen($this->container['address_zipcode']) > 255) {
            return false;
        }
        if (strlen($this->container['address_country']) > 255) {
            return false;
        }
        return true;
    }


    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number Unique integer
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets total_subtotal
     *
     * @return float
     */
    public function getTotalSubtotal()
    {
        return $this->container['total_subtotal'];
    }

    /**
     * Sets total_subtotal
     *
     * @param float $total_subtotal Allows up to 6 decimals. Must not use comma (,) but instead a period (.) for decimals.
     *
     * @return $this
     */
    public function setTotalSubtotal($total_subtotal)
    {
        $this->container['total_subtotal'] = $total_subtotal;

        return $this;
    }

    /**
     * Gets total_total
     *
     * @return float
     */
    public function getTotalTotal()
    {
        return $this->container['total_total'];
    }

    /**
     * Sets total_total
     *
     * @param float $total_total Allows up to 6 decimals. Must not use comma (,) but instead a period (.) for decimals.
     *
     * @return $this
     */
    public function setTotalTotal($total_total)
    {
        $this->container['total_total'] = $total_total;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        if (!is_null($currency) && (strlen($currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling Order., must be smaller than or equal to 3.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets currency_rate
     *
     * @return float
     */
    public function getCurrencyRate()
    {
        return $this->container['currency_rate'];
    }

    /**
     * Sets currency_rate
     *
     * @param float $currency_rate Allows up to 6 decimals. Must not use comma (,) but instead a period (.) for decimals.
     *
     * @return $this
     */
    public function setCurrencyRate($currency_rate)
    {
        $this->container['currency_rate'] = $currency_rate;

        return $this;
    }

    /**
     * Gets is_booked
     *
     * @return bool
     */
    public function getIsBooked()
    {
        return $this->container['is_booked'];
    }

    /**
     * Sets is_booked
     *
     * @param bool $is_booked is_booked
     *
     * @return $this
     */
    public function setIsBooked($is_booked)
    {
        $this->container['is_booked'] = $is_booked;

        return $this;
    }

    /**
     * Gets is_shipped
     *
     * @return bool
     */
    public function getIsShipped()
    {
        return $this->container['is_shipped'];
    }

    /**
     * Sets is_shipped
     *
     * @param bool $is_shipped is_shipped
     *
     * @return $this
     */
    public function setIsShipped($is_shipped)
    {
        $this->container['is_shipped'] = $is_shipped;

        return $this;
    }

    /**
     * Gets is_partly_shipped
     *
     * @return bool
     */
    public function getIsPartlyShipped()
    {
        return $this->container['is_partly_shipped'];
    }

    /**
     * Sets is_partly_shipped
     *
     * @param bool $is_partly_shipped is_partly_shipped
     *
     * @return $this
     */
    public function setIsPartlyShipped($is_partly_shipped)
    {
        $this->container['is_partly_shipped'] = $is_partly_shipped;

        return $this;
    }

    /**
     * Gets is_invoiced
     *
     * @return bool
     */
    public function getIsInvoiced()
    {
        return $this->container['is_invoiced'];
    }

    /**
     * Sets is_invoiced
     *
     * @param bool $is_invoiced is_invoiced
     *
     * @return $this
     */
    public function setIsInvoiced($is_invoiced)
    {
        $this->container['is_invoiced'] = $is_invoiced;

        return $this;
    }

    /**
     * Gets is_partly_invoiced
     *
     * @return bool
     */
    public function getIsPartlyInvoiced()
    {
        return $this->container['is_partly_invoiced'];
    }

    /**
     * Sets is_partly_invoiced
     *
     * @param bool $is_partly_invoiced is_partly_invoiced
     *
     * @return $this
     */
    public function setIsPartlyInvoiced($is_partly_invoiced)
    {
        $this->container['is_partly_invoiced'] = $is_partly_invoiced;

        return $this;
    }

    /**
     * Gets is_paid
     *
     * @return bool
     */
    public function getIsPaid()
    {
        return $this->container['is_paid'];
    }

    /**
     * Sets is_paid
     *
     * @param bool $is_paid is_paid
     *
     * @return $this
     */
    public function setIsPaid($is_paid)
    {
        $this->container['is_paid'] = $is_paid;

        return $this;
    }

    /**
     * Gets is_partly_paid
     *
     * @return bool
     */
    public function getIsPartlyPaid()
    {
        return $this->container['is_partly_paid'];
    }

    /**
     * Sets is_partly_paid
     *
     * @param bool $is_partly_paid is_partly_paid
     *
     * @return $this
     */
    public function setIsPartlyPaid($is_partly_paid)
    {
        $this->container['is_partly_paid'] = $is_partly_paid;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Swagger\Client\Model\OrderLine[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Swagger\Client\Model\OrderLine[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Swagger\Client\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Swagger\Client\Model\Customer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id employee_id
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \Swagger\Client\Model\Employee
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \Swagger\Client\Model\Employee $employee employee
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets address_street
     *
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['address_street'];
    }

    /**
     * Sets address_street
     *
     * @param string $address_street address_street
     *
     * @return $this
     */
    public function setAddressStreet($address_street)
    {
        if (!is_null($address_street) && (strlen($address_street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_street when calling Order., must be smaller than or equal to 255.');
        }

        $this->container['address_street'] = $address_street;

        return $this;
    }

    /**
     * Gets address_street2
     *
     * @return string
     */
    public function getAddressStreet2()
    {
        return $this->container['address_street2'];
    }

    /**
     * Sets address_street2
     *
     * @param string $address_street2 address_street2
     *
     * @return $this
     */
    public function setAddressStreet2($address_street2)
    {
        if (!is_null($address_street2) && (strlen($address_street2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_street2 when calling Order., must be smaller than or equal to 255.');
        }

        $this->container['address_street2'] = $address_street2;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city address_city
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        if (!is_null($address_city) && (strlen($address_city) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_city when calling Order., must be smaller than or equal to 255.');
        }

        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_zipcode
     *
     * @return string
     */
    public function getAddressZipcode()
    {
        return $this->container['address_zipcode'];
    }

    /**
     * Sets address_zipcode
     *
     * @param string $address_zipcode address_zipcode
     *
     * @return $this
     */
    public function setAddressZipcode($address_zipcode)
    {
        if (!is_null($address_zipcode) && (strlen($address_zipcode) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_zipcode when calling Order., must be smaller than or equal to 255.');
        }

        $this->container['address_zipcode'] = $address_zipcode;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param string $address_country address_country
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        if (!is_null($address_country) && (strlen($address_country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address_country when calling Order., must be smaller than or equal to 255.');
        }

        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets deliver_at
     *
     * @return string
     */
    public function getDeliverAt()
    {
        return $this->container['deliver_at'];
    }

    /**
     * Sets deliver_at
     *
     * @param string $deliver_at deliver_at
     *
     * @return $this
     */
    public function setDeliverAt($deliver_at)
    {
        $this->container['deliver_at'] = $deliver_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string $self self
     *
     * @return $this
     */
    public function setSelf($self)
    {
        $this->container['self'] = $self;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

