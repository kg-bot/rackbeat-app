<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rackbeat
 *
 * If you're interested in demo access, contact us below and we will setup a temporary account for you. Alternatively you can sign up through our site and skip the billing step.
 *
 * OpenAPI spec version: 0.5.4
 * Contact: tech@rackbeat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number' => 'string',
        'group' => 'int',
        'name' => 'string',
        'barcode' => 'string',
        'sales_price' => 'float',
        'recommended_cost_price' => 'float',
        'min_order' => 'int',
        'min_stock' => 'int',
        'product_category' => 'int',
        'default_location_id' => 'int',
        'unit' => 'int',
        'physical' => '\Swagger\Client\Model\ProductsPhysical',
        'stock_quantity' => 'int',
        'in_order_quantity' => 'int',
        'purchased_quantity' => 'int',
        'available_quantity' => 'int',
        'is_draft' => 'bool',
        'created_at' => 'string',
        'updated_at' => 'string',
        'self' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number' => null,
        'group' => 'int10',
        'name' => null,
        'barcode' => null,
        'sales_price' => null,
        'recommended_cost_price' => null,
        'min_order' => 'int10',
        'min_stock' => 'int10',
        'product_category' => 'int10',
        'default_location_id' => 'int10',
        'unit' => 'int10',
        'physical' => null,
        'stock_quantity' => 'int10',
        'in_order_quantity' => 'int10',
        'purchased_quantity' => 'int10',
        'available_quantity' => 'int10',
        'is_draft' => null,
        'created_at' => 'ISO8601 (Atom)',
        'updated_at' => 'ISO8601 (Atom)',
        'self' => 'url'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'group' => 'group',
        'name' => 'name',
        'barcode' => 'barcode',
        'sales_price' => 'sales_price',
        'recommended_cost_price' => 'recommended_cost_price',
        'min_order' => 'min_order',
        'min_stock' => 'min_stock',
        'product_category' => 'product_category',
        'default_location_id' => 'default_location_id',
        'unit' => 'unit',
        'physical' => 'physical',
        'stock_quantity' => 'stock_quantity',
        'in_order_quantity' => 'in_order_quantity',
        'purchased_quantity' => 'purchased_quantity',
        'available_quantity' => 'available_quantity',
        'is_draft' => 'is_draft',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'self' => 'self'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'group' => 'setGroup',
        'name' => 'setName',
        'barcode' => 'setBarcode',
        'sales_price' => 'setSalesPrice',
        'recommended_cost_price' => 'setRecommendedCostPrice',
        'min_order' => 'setMinOrder',
        'min_stock' => 'setMinStock',
        'product_category' => 'setProductCategory',
        'default_location_id' => 'setDefaultLocationId',
        'unit' => 'setUnit',
        'physical' => 'setPhysical',
        'stock_quantity' => 'setStockQuantity',
        'in_order_quantity' => 'setInOrderQuantity',
        'purchased_quantity' => 'setPurchasedQuantity',
        'available_quantity' => 'setAvailableQuantity',
        'is_draft' => 'setIsDraft',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'self' => 'setSelf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'group' => 'getGroup',
        'name' => 'getName',
        'barcode' => 'getBarcode',
        'sales_price' => 'getSalesPrice',
        'recommended_cost_price' => 'getRecommendedCostPrice',
        'min_order' => 'getMinOrder',
        'min_stock' => 'getMinStock',
        'product_category' => 'getProductCategory',
        'default_location_id' => 'getDefaultLocationId',
        'unit' => 'getUnit',
        'physical' => 'getPhysical',
        'stock_quantity' => 'getStockQuantity',
        'in_order_quantity' => 'getInOrderQuantity',
        'purchased_quantity' => 'getPurchasedQuantity',
        'available_quantity' => 'getAvailableQuantity',
        'is_draft' => 'getIsDraft',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'self' => 'getSelf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['sales_price'] = isset($data['sales_price']) ? $data['sales_price'] : null;
        $this->container['recommended_cost_price'] = isset($data['recommended_cost_price']) ? $data['recommended_cost_price'] : null;
        $this->container['min_order'] = isset($data['min_order']) ? $data['min_order'] : null;
        $this->container['min_stock'] = isset($data['min_stock']) ? $data['min_stock'] : null;
        $this->container['product_category'] = isset($data['product_category']) ? $data['product_category'] : null;
        $this->container['default_location_id'] = isset($data['default_location_id']) ? $data['default_location_id'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['physical'] = isset($data['physical']) ? $data['physical'] : null;
        $this->container['stock_quantity'] = isset($data['stock_quantity']) ? $data['stock_quantity'] : null;
        $this->container['in_order_quantity'] = isset($data['in_order_quantity']) ? $data['in_order_quantity'] : null;
        $this->container['purchased_quantity'] = isset($data['purchased_quantity']) ? $data['purchased_quantity'] : null;
        $this->container['available_quantity'] = isset($data['available_quantity']) ? $data['available_quantity'] : null;
        $this->container['is_draft'] = isset($data['is_draft']) ? $data['is_draft'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['self'] = isset($data['self']) ? $data['self'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((strlen($this->container['number']) > 50)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['group'] === null) {
            $invalidProperties[] = "'group' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 80)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['barcode']) && (strlen($this->container['barcode']) > 50)) {
            $invalidProperties[] = "invalid value for 'barcode', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['sales_price'] === null) {
            $invalidProperties[] = "'sales_price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['number'] === null) {
            return false;
        }
        if (strlen($this->container['number']) > 50) {
            return false;
        }
        if ($this->container['group'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 80) {
            return false;
        }
        if (strlen($this->container['barcode']) > 50) {
            return false;
        }
        if ($this->container['sales_price'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Can be either a string or an integer. May also contain dashes.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        if ((strlen($number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $number when calling Product., must be smaller than or equal to 50.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets group
     *
     * @return int
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param int $group Must relate to an existing ProductGroup.
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 80)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Product., must be smaller than or equal to 80.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode barcode
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        if (!is_null($barcode) && (strlen($barcode) > 50)) {
            throw new \InvalidArgumentException('invalid length for $barcode when calling Product., must be smaller than or equal to 50.');
        }

        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets sales_price
     *
     * @return float
     */
    public function getSalesPrice()
    {
        return $this->container['sales_price'];
    }

    /**
     * Sets sales_price
     *
     * @param float $sales_price Allows up to 6 decimals. Must not use comma (,) but instead a period (.) for decimals.
     *
     * @return $this
     */
    public function setSalesPrice($sales_price)
    {
        $this->container['sales_price'] = $sales_price;

        return $this;
    }

    /**
     * Gets recommended_cost_price
     *
     * @return float
     */
    public function getRecommendedCostPrice()
    {
        return $this->container['recommended_cost_price'];
    }

    /**
     * Sets recommended_cost_price
     *
     * @param float $recommended_cost_price Allows up to 6 decimals. Must not use comma (,) but instead a period (.) for decimals.
     *
     * @return $this
     */
    public function setRecommendedCostPrice($recommended_cost_price)
    {
        $this->container['recommended_cost_price'] = $recommended_cost_price;

        return $this;
    }

    /**
     * Gets min_order
     *
     * @return int
     */
    public function getMinOrder()
    {
        return $this->container['min_order'];
    }

    /**
     * Sets min_order
     *
     * @param int $min_order Minimum quantity to order.
     *
     * @return $this
     */
    public function setMinOrder($min_order)
    {
        $this->container['min_order'] = $min_order;

        return $this;
    }

    /**
     * Gets min_stock
     *
     * @return int
     */
    public function getMinStock()
    {
        return $this->container['min_stock'];
    }

    /**
     * Sets min_stock
     *
     * @param int $min_stock Minimum quantity in stock.
     *
     * @return $this
     */
    public function setMinStock($min_stock)
    {
        $this->container['min_stock'] = $min_stock;

        return $this;
    }

    /**
     * Gets product_category
     *
     * @return int
     */
    public function getProductCategory()
    {
        return $this->container['product_category'];
    }

    /**
     * Sets product_category
     *
     * @param int $product_category Must relate to an existing Product Category.
     *
     * @return $this
     */
    public function setProductCategory($product_category)
    {
        $this->container['product_category'] = $product_category;

        return $this;
    }

    /**
     * Gets default_location_id
     *
     * @return int
     */
    public function getDefaultLocationId()
    {
        return $this->container['default_location_id'];
    }

    /**
     * Sets default_location_id
     *
     * @param int $default_location_id Must relate to an existing Location.
     *
     * @return $this
     */
    public function setDefaultLocationId($default_location_id)
    {
        $this->container['default_location_id'] = $default_location_id;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return int
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param int $unit Must relate to an existing Unit.
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets physical
     *
     * @return \Swagger\Client\Model\ProductsPhysical
     */
    public function getPhysical()
    {
        return $this->container['physical'];
    }

    /**
     * Sets physical
     *
     * @param \Swagger\Client\Model\ProductsPhysical $physical physical
     *
     * @return $this
     */
    public function setPhysical($physical)
    {
        $this->container['physical'] = $physical;

        return $this;
    }

    /**
     * Gets stock_quantity
     *
     * @return int
     */
    public function getStockQuantity()
    {
        return $this->container['stock_quantity'];
    }

    /**
     * Sets stock_quantity
     *
     * @param int $stock_quantity Quantity in stock
     *
     * @return $this
     */
    public function setStockQuantity($stock_quantity)
    {
        $this->container['stock_quantity'] = $stock_quantity;

        return $this;
    }

    /**
     * Gets in_order_quantity
     *
     * @return int
     */
    public function getInOrderQuantity()
    {
        return $this->container['in_order_quantity'];
    }

    /**
     * Sets in_order_quantity
     *
     * @param int $in_order_quantity Quantity in order (outgoing)
     *
     * @return $this
     */
    public function setInOrderQuantity($in_order_quantity)
    {
        $this->container['in_order_quantity'] = $in_order_quantity;

        return $this;
    }

    /**
     * Gets purchased_quantity
     *
     * @return int
     */
    public function getPurchasedQuantity()
    {
        return $this->container['purchased_quantity'];
    }

    /**
     * Sets purchased_quantity
     *
     * @param int $purchased_quantity Quantity purchased (incoming)
     *
     * @return $this
     */
    public function setPurchasedQuantity($purchased_quantity)
    {
        $this->container['purchased_quantity'] = $purchased_quantity;

        return $this;
    }

    /**
     * Gets available_quantity
     *
     * @return int
     */
    public function getAvailableQuantity()
    {
        return $this->container['available_quantity'];
    }

    /**
     * Sets available_quantity
     *
     * @param int $available_quantity Quantity in available (in stock - in order)
     *
     * @return $this
     */
    public function setAvailableQuantity($available_quantity)
    {
        $this->container['available_quantity'] = $available_quantity;

        return $this;
    }

    /**
     * Gets is_draft
     *
     * @return bool
     */
    public function getIsDraft()
    {
        return $this->container['is_draft'];
    }

    /**
     * Sets is_draft
     *
     * @param bool $is_draft Is it a draft product?
     *
     * @return $this
     */
    public function setIsDraft($is_draft)
    {
        $this->container['is_draft'] = $is_draft;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string $self self
     *
     * @return $this
     */
    public function setSelf($self)
    {
        $this->container['self'] = $self;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

