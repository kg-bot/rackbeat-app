<?php
/**
 * Source
 *
 * PHP version 5
 *
 * @category Class
 * @package  RackbeatApp\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rackbeat
 *
 * If you're interested in demo access, contact us below and we will setup a temporary account for you. Alternatively you can sign up through our site and skip the billing step.
 *
 * OpenAPI spec version: 0.5.4
 * Contact: tech@rackbeat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RackbeatApp\Client\Model;

use ArrayAccess;
use RackbeatApp\Client\ObjectSerializer;

/**
 * Source Class Doc Comment
 *
 * @category Class
 * @package     RackbeatApp\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Source implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Source';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'object' => 'string',
        'address_city' => 'string',
        'address_country' => 'string',
        'address_line1' => 'string',
        'address_line1_check' => 'string',
        'address_line2' => 'string',
        'address_state' => 'string',
        'address_zip' => 'string',
        'address_zip_check' => 'string',
        'brand' => 'string',
        'country' => 'string',
        'cvc_check' => 'string',
        'dynamic_last4' => 'string',
        'exp_month' => 'int',
        'exp_year' => 'int',
        'funding' => 'string',
        'last4' => 'string',
        'metadata' => 'object',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int20',
        'object' => null,
        'address_city' => null,
        'address_country' => null,
        'address_line1' => null,
        'address_line1_check' => null,
        'address_line2' => null,
        'address_state' => null,
        'address_zip' => null,
        'address_zip_check' => null,
        'brand' => null,
        'country' => null,
        'cvc_check' => null,
        'dynamic_last4' => null,
        'exp_month' => null,
        'exp_year' => null,
        'funding' => null,
        'last4' => null,
        'metadata' => null,
        'name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object' => 'object',
        'address_city' => 'address_city',
        'address_country' => 'address_country',
        'address_line1' => 'address_line1',
        'address_line1_check' => 'address_line1_check',
        'address_line2' => 'address_line2',
        'address_state' => 'address_state',
        'address_zip' => 'address_zip',
        'address_zip_check' => 'address_zip_check',
        'brand' => 'brand',
        'country' => 'country',
        'cvc_check' => 'cvc_check',
        'dynamic_last4' => 'dynamic_last4',
        'exp_month' => 'exp_month',
        'exp_year' => 'exp_year',
        'funding' => 'funding',
        'last4' => 'last4',
        'metadata' => 'metadata',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object' => 'setObject',
        'address_city' => 'setAddressCity',
        'address_country' => 'setAddressCountry',
        'address_line1' => 'setAddressLine1',
        'address_line1_check' => 'setAddressLine1Check',
        'address_line2' => 'setAddressLine2',
        'address_state' => 'setAddressState',
        'address_zip' => 'setAddressZip',
        'address_zip_check' => 'setAddressZipCheck',
        'brand' => 'setBrand',
        'country' => 'setCountry',
        'cvc_check' => 'setCvcCheck',
        'dynamic_last4' => 'setDynamicLast4',
        'exp_month' => 'setExpMonth',
        'exp_year' => 'setExpYear',
        'funding' => 'setFunding',
        'last4' => 'setLast4',
        'metadata' => 'setMetadata',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object' => 'getObject',
        'address_city' => 'getAddressCity',
        'address_country' => 'getAddressCountry',
        'address_line1' => 'getAddressLine1',
        'address_line1_check' => 'getAddressLine1Check',
        'address_line2' => 'getAddressLine2',
        'address_state' => 'getAddressState',
        'address_zip' => 'getAddressZip',
        'address_zip_check' => 'getAddressZipCheck',
        'brand' => 'getBrand',
        'country' => 'getCountry',
        'cvc_check' => 'getCvcCheck',
        'dynamic_last4' => 'getDynamicLast4',
        'exp_month' => 'getExpMonth',
        'exp_year' => 'getExpYear',
        'funding' => 'getFunding',
        'last4' => 'getLast4',
        'metadata' => 'getMetadata',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['object'] = isset($data['object']) ? $data['object'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line1_check'] = isset($data['address_line1_check']) ? $data['address_line1_check'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['address_state'] = isset($data['address_state']) ? $data['address_state'] : null;
        $this->container['address_zip'] = isset($data['address_zip']) ? $data['address_zip'] : null;
        $this->container['address_zip_check'] = isset($data['address_zip_check']) ? $data['address_zip_check'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['cvc_check'] = isset($data['cvc_check']) ? $data['cvc_check'] : null;
        $this->container['dynamic_last4'] = isset($data['dynamic_last4']) ? $data['dynamic_last4'] : null;
        $this->container['exp_month'] = isset($data['exp_month']) ? $data['exp_month'] : null;
        $this->container['exp_year'] = isset($data['exp_year']) ? $data['exp_year'] : null;
        $this->container['funding'] = isset($data['funding']) ? $data['funding'] : null;
        $this->container['last4'] = isset($data['last4']) ? $data['last4'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string $object object
     *
     * @return $this
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city address_city
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param string $address_country address_country
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 address_line1
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line1_check
     *
     * @return string
     */
    public function getAddressLine1Check()
    {
        return $this->container['address_line1_check'];
    }

    /**
     * Sets address_line1_check
     *
     * @param string $address_line1_check address_line1_check
     *
     * @return $this
     */
    public function setAddressLine1Check($address_line1_check)
    {
        $this->container['address_line1_check'] = $address_line1_check;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string $address_line2 address_line2
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets address_state
     *
     * @return string
     */
    public function getAddressState()
    {
        return $this->container['address_state'];
    }

    /**
     * Sets address_state
     *
     * @param string $address_state address_state
     *
     * @return $this
     */
    public function setAddressState($address_state)
    {
        $this->container['address_state'] = $address_state;

        return $this;
    }

    /**
     * Gets address_zip
     *
     * @return string
     */
    public function getAddressZip()
    {
        return $this->container['address_zip'];
    }

    /**
     * Sets address_zip
     *
     * @param string $address_zip address_zip
     *
     * @return $this
     */
    public function setAddressZip($address_zip)
    {
        $this->container['address_zip'] = $address_zip;

        return $this;
    }

    /**
     * Gets address_zip_check
     *
     * @return string
     */
    public function getAddressZipCheck()
    {
        return $this->container['address_zip_check'];
    }

    /**
     * Sets address_zip_check
     *
     * @param string $address_zip_check address_zip_check
     *
     * @return $this
     */
    public function setAddressZipCheck($address_zip_check)
    {
        $this->container['address_zip_check'] = $address_zip_check;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string $brand brand
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets cvc_check
     *
     * @return string
     */
    public function getCvcCheck()
    {
        return $this->container['cvc_check'];
    }

    /**
     * Sets cvc_check
     *
     * @param string $cvc_check cvc_check
     *
     * @return $this
     */
    public function setCvcCheck($cvc_check)
    {
        $this->container['cvc_check'] = $cvc_check;

        return $this;
    }

    /**
     * Gets dynamic_last4
     *
     * @return string
     */
    public function getDynamicLast4()
    {
        return $this->container['dynamic_last4'];
    }

    /**
     * Sets dynamic_last4
     *
     * @param string $dynamic_last4 dynamic_last4
     *
     * @return $this
     */
    public function setDynamicLast4($dynamic_last4)
    {
        $this->container['dynamic_last4'] = $dynamic_last4;

        return $this;
    }

    /**
     * Gets exp_month
     *
     * @return int
     */
    public function getExpMonth()
    {
        return $this->container['exp_month'];
    }

    /**
     * Sets exp_month
     *
     * @param int $exp_month exp_month
     *
     * @return $this
     */
    public function setExpMonth($exp_month)
    {
        $this->container['exp_month'] = $exp_month;

        return $this;
    }

    /**
     * Gets exp_year
     *
     * @return int
     */
    public function getExpYear()
    {
        return $this->container['exp_year'];
    }

    /**
     * Sets exp_year
     *
     * @param int $exp_year exp_year
     *
     * @return $this
     */
    public function setExpYear($exp_year)
    {
        $this->container['exp_year'] = $exp_year;

        return $this;
    }

    /**
     * Gets funding
     *
     * @return string
     */
    public function getFunding()
    {
        return $this->container['funding'];
    }

    /**
     * Sets funding
     *
     * @param string $funding funding
     *
     * @return $this
     */
    public function setFunding($funding)
    {
        $this->container['funding'] = $funding;

        return $this;
    }

    /**
     * Gets last4
     *
     * @return string
     */
    public function getLast4()
    {
        return $this->container['last4'];
    }

    /**
     * Sets last4
     *
     * @param string $last4 last4
     *
     * @return $this
     */
    public function setLast4($last4)
    {
        $this->container['last4'] = $last4;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

