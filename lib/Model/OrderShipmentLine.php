<?php
/**
 * OrderShipmentLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  RackbeatApp\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rackbeat
 *
 * If you're interested in demo access, contact us below and we will setup a temporary account for you. Alternatively you can sign up through our site and skip the billing step.
 *
 * OpenAPI spec version: 0.5.4
 * Contact: tech@rackbeat.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RackbeatApp\Client\Model;

use ArrayAccess;
use RackbeatApp\Client\ObjectSerializer;

/**
 * OrderShipmentLine Class Doc Comment
 *
 * @category Class
 * @package     RackbeatApp\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderShipmentLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderShipmentLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id'                   => 'int',
        'child_id'             => 'string',
        'child_type'           => 'string',
        'location_id'          => 'int',
        'location'             => '\RackbeatApp\Client\Model\Location',
        'quantity'             => 'int',
        'is_picked'            => 'bool',
        'picked_by'            => '\RackbeatApp\Client\Model\User',
        'variations'           => 'string',
        'variations_formatted' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int10',
        'child_id' => null,
        'child_type' => null,
        'location_id' => 'int10',
        'location' => null,
        'quantity' => null,
        'is_picked' => null,
        'picked_by' => null,
        'variations' => null,
        'variations_formatted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'child_id' => 'child_id',
        'child_type' => 'child_type',
        'location_id' => 'location_id',
        'location' => 'location',
        'quantity' => 'quantity',
        'is_picked' => 'is_picked',
        'picked_by' => 'picked_by',
        'variations' => 'variations',
        'variations_formatted' => 'variations_formatted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'child_id' => 'setChildId',
        'child_type' => 'setChildType',
        'location_id' => 'setLocationId',
        'location' => 'setLocation',
        'quantity' => 'setQuantity',
        'is_picked' => 'setIsPicked',
        'picked_by' => 'setPickedBy',
        'variations' => 'setVariations',
        'variations_formatted' => 'setVariationsFormatted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'child_id' => 'getChildId',
        'child_type' => 'getChildType',
        'location_id' => 'getLocationId',
        'location' => 'getLocation',
        'quantity' => 'getQuantity',
        'is_picked' => 'getIsPicked',
        'picked_by' => 'getPickedBy',
        'variations' => 'getVariations',
        'variations_formatted' => 'getVariationsFormatted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['child_id'] = isset($data['child_id']) ? $data['child_id'] : null;
        $this->container['child_type'] = isset($data['child_type']) ? $data['child_type'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['is_picked'] = isset($data['is_picked']) ? $data['is_picked'] : null;
        $this->container['picked_by'] = isset($data['picked_by']) ? $data['picked_by'] : null;
        $this->container['variations'] = isset($data['variations']) ? $data['variations'] : null;
        $this->container['variations_formatted'] = isset($data['variations_formatted']) ? $data['variations_formatted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets child_id
     *
     * @return string
     */
    public function getChildId()
    {
        return $this->container['child_id'];
    }

    /**
     * Sets child_id
     *
     * @param string $child_id child_id
     *
     * @return $this
     */
    public function setChildId($child_id)
    {
        $this->container['child_id'] = $child_id;

        return $this;
    }

    /**
     * Gets child_type
     *
     * @return string
     */
    public function getChildType()
    {
        return $this->container['child_type'];
    }

    /**
     * Sets child_type
     *
     * @param string $child_type lor or product
     *
     * @return $this
     */
    public function setChildType($child_type)
    {
        $this->container['child_type'] = $child_type;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \RackbeatApp\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \RackbeatApp\Client\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets is_picked
     *
     * @return bool
     */
    public function getIsPicked()
    {
        return $this->container['is_picked'];
    }

    /**
     * Sets is_picked
     *
     * @param bool $is_picked is_picked
     *
     * @return $this
     */
    public function setIsPicked($is_picked)
    {
        $this->container['is_picked'] = $is_picked;

        return $this;
    }

    /**
     * Gets picked_by
     *
     * @return \RackbeatApp\Client\Model\User
     */
    public function getPickedBy()
    {
        return $this->container['picked_by'];
    }

    /**
     * Sets picked_by
     *
     * @param \RackbeatApp\Client\Model\User $picked_by picked_by
     *
     * @return $this
     */
    public function setPickedBy($picked_by)
    {
        $this->container['picked_by'] = $picked_by;

        return $this;
    }

    /**
     * Gets variations
     *
     * @return string
     */
    public function getVariations()
    {
        return $this->container['variations'];
    }

    /**
     * Sets variations
     *
     * @param string $variations variations
     *
     * @return $this
     */
    public function setVariations($variations)
    {
        $this->container['variations'] = $variations;

        return $this;
    }

    /**
     * Gets variations_formatted
     *
     * @return string
     */
    public function getVariationsFormatted()
    {
        return $this->container['variations_formatted'];
    }

    /**
     * Sets variations_formatted
     *
     * @param string $variations_formatted variations_formatted
     *
     * @return $this
     */
    public function setVariationsFormatted($variations_formatted)
    {
        $this->container['variations_formatted'] = $variations_formatted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

